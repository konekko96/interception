package com.zskpaco.interception.plugin.basic;

import org.objectweb.asm.*;

import static org.objectweb.asm.Opcodes.*;

public class _RunnerBytes {

    public static byte[] dump(String owner, String instance, String uiOwner, String asyncOwner) {
        ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_MAXS);
        FieldVisitor fv;
        MethodVisitor mv;

        cw.visit(52, ACC_PUBLIC + ACC_SUPER, owner, null, "java/lang/Object", null);

        cw.visitInnerClass("java/util/Map$Entry", "java/util/Map", "Entry", ACC_PUBLIC + ACC_STATIC + ACC_ABSTRACT + ACC_INTERFACE);

        {
            fv = cw.visitField(ACC_PRIVATE + ACC_FINAL + ACC_STATIC, "HANDLER", "Landroid/os/Handler;", null, null);
            fv.visitEnd();
        }
        {
            fv = cw.visitField(ACC_PRIVATE + ACC_FINAL + ACC_STATIC, "BUILD_MAP", "Ljava/util/Map;", "Ljava/util/Map<Ljava/lang/String;Ljava/util/Map<Ljava/lang/Integer;Lcom/richard/interception/internal/IElementMultipartBuilder;>;>;", null);
            fv.visitEnd();
        }
        {
            fv = cw.visitField(ACC_PRIVATE + ACC_FINAL + ACC_STATIC, "FACTORY", "Lcom/richard/interception/internal/IElementInstanceLoader;", null, null);
            fv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "<init>", "()V", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false);
            mv.visitInsn(RETURN);
            Label l1 = new Label();
            mv.visitLabel(l1);
            mv.visitMaxs(1, 1);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, "check", "(Ljava/lang/String;)Z", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitFieldInsn(GETSTATIC, owner, "BUILD_MAP", "Ljava/util/Map;");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "containsKey", "(Ljava/lang/Object;)Z", true);
            Label l1 = new Label();
            mv.visitJumpInsn(IFEQ, l1);
            Label l2 = new Label();
            mv.visitLabel(l2);
            mv.visitInsn(ICONST_1);
            mv.visitInsn(IRETURN);
            mv.visitLabel(l1);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitInsn(ICONST_0);
            mv.visitInsn(IRETURN);
            Label l3 = new Label();
            mv.visitLabel(l3);
            mv.visitMaxs(2, 1);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, "getBuilderById", "(Ljava/lang/String;I)Lcom/richard/interception/internal/IElementMultipartBuilder;", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitFieldInsn(GETSTATIC, owner, "BUILD_MAP", "Ljava/util/Map;");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "get", "(Ljava/lang/Object;)Ljava/lang/Object;", true);
            mv.visitTypeInsn(CHECKCAST, "java/util/Map");
            mv.visitVarInsn(ILOAD, 1);
            mv.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "valueOf", "(I)Ljava/lang/Integer;", false);
            mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "get", "(Ljava/lang/Object;)Ljava/lang/Object;", true);
            mv.visitTypeInsn(CHECKCAST, "com/richard/interception/internal/IElementMultipartBuilder");
            mv.visitInsn(ARETURN);
            Label l1 = new Label();
            mv.visitLabel(l1);
            mv.visitMaxs(2, 2);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, "add", "(Ljava/lang/String;Ljava/util/Map;)V", "(Ljava/lang/String;Ljava/util/Map<Ljava/lang/Integer;Lcom/richard/interception/internal/IElementMultipartBuilder;>;)V", null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitFieldInsn(GETSTATIC, owner, "BUILD_MAP", "Ljava/util/Map;");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
            mv.visitInsn(POP);
            Label l1 = new Label();
            mv.visitLabel(l1);
            mv.visitInsn(RETURN);
            Label l2 = new Label();
            mv.visitLabel(l2);
            mv.visitMaxs(3, 2);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, "_process", "(Lcom/richard/interception/internal/IElementBuilder;Lcom/richard/interception/internal/IElementExecutionLoader;)Ljava/lang/Object;", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitVarInsn(ALOAD, 0);
            Label l1 = new Label();
            mv.visitJumpInsn(IFNULL, l1);
            Label l2 = new Label();
            mv.visitLabel(l2);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEINTERFACE, "com/richard/interception/internal/IElementBuilder", "async", "()Z", true);
            Label l3 = new Label();
            mv.visitJumpInsn(IFEQ, l3);
            Label l4 = new Label();
            mv.visitLabel(l4);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKESTATIC, owner, "_async", "(Lcom/richard/interception/internal/IElementBuilder;Lcom/richard/interception/internal/IElementExecutionLoader;)V", false);
            mv.visitJumpInsn(GOTO, l1);
            mv.visitLabel(l3);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEINTERFACE, "com/richard/interception/internal/IElementBuilder", "ui", "()Z", true);
            Label l5 = new Label();
            mv.visitJumpInsn(IFEQ, l5);
            Label l6 = new Label();
            mv.visitLabel(l6);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKESTATIC, owner, "_ui", "(Lcom/richard/interception/internal/IElementBuilder;Lcom/richard/interception/internal/IElementExecutionLoader;)V", false);
            mv.visitJumpInsn(GOTO, l1);
            mv.visitLabel(l5);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKESTATIC, owner, "_current", "(Lcom/richard/interception/internal/IElementBuilder;Lcom/richard/interception/internal/IElementExecutionLoader;)Ljava/lang/Object;", false);
            mv.visitInsn(ARETURN);
            mv.visitLabel(l1);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitInsn(ACONST_NULL);
            mv.visitInsn(ARETURN);
            Label l7 = new Label();
            mv.visitLabel(l7);
            mv.visitMaxs(0, 0);
            mv.visitEnd();
        }
//        {
//            mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, "_surround", "(Lcom/richard/interception/internal/IElementMultipartBuilder;Lcom/richard/interception/internal/IElementExecutionLoader;)V", null, null);
//            mv.visitCode();
//            Label l0 = new Label();
//            mv.visitLabel(l0);
//            mv.visitVarInsn(ALOAD, 0);
//            mv.visitVarInsn(ALOAD, 1);
//            mv.visitMethodInsn(INVOKEINTERFACE, "com/richard/interception/internal/IElementMultipartBuilder", "generate", "(Lcom/richard/interception/internal/IElementExecutionLoader;)Lcom/richard/interception/internal/IElementController;", true);
//            mv.visitTypeInsn(CHECKCAST, "com/richard/interception/internal/IElementControllers");
//            mv.visitVarInsn(ASTORE, 2);
//            Label l1 = new Label();
//            mv.visitLabel(l1);
//            mv.visitTypeInsn(NEW, "java/util/LinkedHashMap");
//            mv.visitInsn(DUP);
//            mv.visitMethodInsn(INVOKESPECIAL, "java/util/LinkedHashMap", "<init>", "()V", false);
//            mv.visitVarInsn(ASTORE, 3);
//            Label l2 = new Label();
//            mv.visitLabel(l2);
//            mv.visitInsn(ICONST_0);
//            mv.visitVarInsn(ISTORE, 4);
//            Label l3 = new Label();
//            mv.visitLabel(l3);
//            mv.visitFrame(Opcodes.F_APPEND, 3, new Object[]{"com/richard/interception/internal/IElementControllers", "java/util/Map", Opcodes.INTEGER}, 0, null);
//            mv.visitVarInsn(ILOAD, 4);
//            mv.visitVarInsn(ALOAD, 2);
//            mv.visitMethodInsn(INVOKEINTERFACE, "com/richard/interception/internal/IElementControllers", "size", "()I", true);
//            Label l4 = new Label();
//            mv.visitJumpInsn(IF_ICMPGE, l4);
//            Label l5 = new Label();
//            mv.visitLabel(l5);
//            mv.visitVarInsn(ALOAD, 2);
//            mv.visitVarInsn(ILOAD, 4);
//            mv.visitMethodInsn(INVOKEINTERFACE, "com/richard/interception/internal/IElementControllers", "getElementByIndex", "(I)Lcom/richard/interception/Element;", true);
//            mv.visitTypeInsn(CHECKCAST, "com/richard/interception/VariableElement");
//            mv.visitVarInsn(ASTORE, 5);
//            Label l6 = new Label();
//            mv.visitLabel(l6);
//            mv.visitVarInsn(ALOAD, 2);
//            mv.visitVarInsn(ILOAD, 4);
//            mv.visitMethodInsn(INVOKEINTERFACE, "com/richard/interception/internal/IElementControllers", "getAnnotationInfoByIndex", "(I)Ljava/util/Map;", true);
//            mv.visitVarInsn(ASTORE, 6);
//            Label l7 = new Label();
//            mv.visitLabel(l7);
//            mv.visitVarInsn(ALOAD, 6);
//            mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "entrySet", "()Ljava/util/Set;", true);
//            mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Set", "iterator", "()Ljava/util/Iterator;", true);
//            mv.visitVarInsn(ASTORE, 7);
//            Label l8 = new Label();
//            mv.visitLabel(l8);
//            mv.visitFrame(Opcodes.F_APPEND, 3, new Object[]{"com/richard/interception/VariableElement", "java/util/Map", "java/util/Iterator"}, 0, null);
//            mv.visitVarInsn(ALOAD, 7);
//            mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "hasNext", "()Z", true);
//            Label l9 = new Label();
//            mv.visitJumpInsn(IFEQ, l9);
//            mv.visitVarInsn(ALOAD, 7);
//            mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "next", "()Ljava/lang/Object;", true);
//            mv.visitTypeInsn(CHECKCAST, "java/util/Map$Entry");
//            mv.visitVarInsn(ASTORE, 8);
//            Label l10 = new Label();
//            mv.visitLabel(l10);
//            mv.visitVarInsn(ALOAD, 8);
//            mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map$Entry", "getKey", "()Ljava/lang/Object;", true);
//            mv.visitTypeInsn(CHECKCAST, "java/lang/Class");
//            mv.visitVarInsn(ASTORE, 9);
//            Label l11 = new Label();
//            mv.visitLabel(l11);
//            mv.visitVarInsn(ALOAD, 3);
//            mv.visitVarInsn(ALOAD, 9);
//            mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "get", "(Ljava/lang/Object;)Ljava/lang/Object;", true);
//            mv.visitTypeInsn(CHECKCAST, "com/richard/interception/AnnotationInterceptor");
//            mv.visitVarInsn(ASTORE, 10);
//            Label l12 = new Label();
//            mv.visitLabel(l12);
//            mv.visitVarInsn(ALOAD, 10);
//            Label l13 = new Label();
//            mv.visitJumpInsn(IFNONNULL, l13);
//            Label l14 = new Label();
//            mv.visitLabel(l14);
//            mv.visitFieldInsn(GETSTATIC, owner, "FACTORY", "Lcom/richard/interception/internal/IElementInstanceLoader;");
//            mv.visitVarInsn(ALOAD, 9);
//            mv.visitMethodInsn(INVOKEINTERFACE, "com/richard/interception/internal/IElementInstanceLoader", "getInterceptorInstance", "(Ljava/lang/Class;)Lcom/richard/interception/AnnotationInterceptor;", true);
//            mv.visitVarInsn(ASTORE, 10);
//            Label l15 = new Label();
//            mv.visitLabel(l15);
//            mv.visitVarInsn(ALOAD, 3);
//            mv.visitVarInsn(ALOAD, 9);
//            mv.visitVarInsn(ALOAD, 10);
//            mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
//            mv.visitInsn(POP);
//            mv.visitLabel(l13);
//            mv.visitFrame(Opcodes.F_APPEND, 3, new Object[]{"java/util/Map$Entry", "java/lang/Class", "com/richard/interception/AnnotationInterceptor"}, 0, null);
//            mv.visitVarInsn(ALOAD, 10);
//            mv.visitVarInsn(ALOAD, 5);
//            mv.visitVarInsn(ALOAD, 8);
//            mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map$Entry", "getValue", "()Ljava/lang/Object;", true);
//            mv.visitTypeInsn(CHECKCAST, "java/util/Map");
//            mv.visitMethodInsn(INVOKEINTERFACE, "com/richard/interception/AnnotationInterceptor", "intercept", "(Lcom/richard/interception/Element;Ljava/util/Map;)Ljava/lang/Object;", true);
//            mv.visitInsn(POP);
//            Label l16 = new Label();
//            mv.visitLabel(l16);
//            mv.visitJumpInsn(GOTO, l8);
//            mv.visitLabel(l9);
//            mv.visitFrame(Opcodes.F_FULL, 5, new Object[]{"com/richard/interception/internal/IElementMultipartBuilder", "com/richard/interception/internal/IElementExecutionLoader", "com/richard/interception/internal/IElementControllers", "java/util/Map", Opcodes.INTEGER}, 0, new Object[]{});
//            mv.visitIincInsn(4, 1);
//            mv.visitJumpInsn(GOTO, l3);
//            mv.visitLabel(l4);
//            mv.visitFrame(Opcodes.F_CHOP, 1, null, 0, null);
//            mv.visitInsn(RETURN);
//            Label l17 = new Label();
//            mv.visitLabel(l17);
//            mv.visitLocalVariable("currentAnnotation", "Ljava/lang/Class;", "Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;", l11, l16, 9);
//            mv.visitLocalVariable("interceptor", "Lcom/richard/interception/AnnotationInterceptor;", null, l12, l16, 10);
//            mv.visitLocalVariable("entry", "Ljava/util/Map$Entry;", "Ljava/util/Map$Entry<Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;>;", l10, l16, 8);
//            mv.visitLocalVariable("element", "Lcom/richard/interception/VariableElement;", null, l6, l9, 5);
//            mv.visitLocalVariable("valuesMap", "Ljava/util/Map;", "Ljava/util/Map<Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;>;", l7, l9, 6);
//            mv.visitLocalVariable("i", "I", null, l3, l4, 4);
//            mv.visitLocalVariable("builder", "Lcom/richard/interception/internal/IElementMultipartBuilder;", null, l0, l17, 0);
//            mv.visitLocalVariable("buildLoader", "Lcom/richard/interception/internal/IElementExecutionLoader;", null, l0, l17, 1);
//            mv.visitLocalVariable("controllers", "Lcom/richard/interception/internal/IElementControllers;", null, l1, l17, 2);
//            mv.visitLocalVariable("interceptorMap", "Ljava/util/Map;", "Ljava/util/Map<Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;Lcom/richard/interception/AnnotationInterceptor;>;", l2, l17, 3);
//
//            mv.visitMaxs(0, 0);
//            mv.visitEnd();
//        }
        {
            mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, "_surround", "(Lcom/richard/interception/internal/IElementMultipartBuilder;Lcom/richard/interception/internal/IElementExecutionLoader;)V", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKEINTERFACE, "com/richard/interception/internal/IElementMultipartBuilder", "generate", "(Lcom/richard/interception/internal/IElementExecutionLoader;)Lcom/richard/interception/internal/IElementController;", true);
            mv.visitVarInsn(ASTORE, 2);
            Label l1 = new Label();
            mv.visitLabel(l1);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitMethodInsn(INVOKEINTERFACE, "com/richard/interception/internal/IElementController", "annotations", "()[Ljava/lang/Class;", true);
            mv.visitInsn(ICONST_0);
            mv.visitInsn(AALOAD);
            mv.visitVarInsn(ASTORE, 3);
            Label l2 = new Label();
            mv.visitLabel(l2);
            mv.visitFieldInsn(GETSTATIC, owner, "FACTORY", "Lcom/richard/interception/internal/IElementInstanceLoader;");
            mv.visitVarInsn(ALOAD, 3);
            mv.visitMethodInsn(INVOKEINTERFACE, "com/richard/interception/internal/IElementInstanceLoader", "getInterceptorInstance", "(Ljava/lang/Class;)Lcom/richard/interception/AnnotationInterceptor;", true);
            mv.visitVarInsn(ASTORE, 4);
            Label l3 = new Label();
            mv.visitLabel(l3);
            mv.visitVarInsn(ALOAD, 4);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitMethodInsn(INVOKEINTERFACE, "com/richard/interception/internal/IElementController", "getElement", "()Lcom/richard/interception/Element;", true);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitInsn(ACONST_NULL);
            mv.visitMethodInsn(INVOKEINTERFACE, "com/richard/interception/internal/IElementController", "getAnnotationValue", "(Ljava/lang/Class;)Ljava/util/Map;", true);
            mv.visitMethodInsn(INVOKEINTERFACE, "com/richard/interception/AnnotationInterceptor", "intercept", "(Lcom/richard/interception/Element;Ljava/util/Map;)Ljava/lang/Object;", true);
            mv.visitInsn(POP);
            Label l4 = new Label();
            mv.visitLabel(l4);
            mv.visitInsn(RETURN);
            Label l5 = new Label();
            mv.visitLabel(l5);
            mv.visitMaxs(0, 0);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, "_current", "(Lcom/richard/interception/internal/IElementBuilder;Lcom/richard/interception/internal/IElementExecutionLoader;)Ljava/lang/Object;", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitInsn(ACONST_NULL);
            mv.visitVarInsn(ASTORE, 2);
            Label l1 = new Label();
            mv.visitLabel(l1);
            mv.visitVarInsn(ALOAD, 0);
            Label l2 = new Label();
            mv.visitJumpInsn(IFNONNULL, l2);
            Label l3 = new Label();
            mv.visitLabel(l3);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitInsn(ARETURN);
            mv.visitLabel(l2);
            mv.visitFrame(Opcodes.F_APPEND, 1, new Object[]{"java/lang/Object"}, 0, null);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKEINTERFACE, "com/richard/interception/internal/IElementBuilder", "generate", "(Lcom/richard/interception/internal/IElementExecutionLoader;)Lcom/richard/interception/internal/IElementController;", true);
            mv.visitVarInsn(ASTORE, 3);
            Label l4 = new Label();
            mv.visitLabel(l4);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitMethodInsn(INVOKEINTERFACE, "com/richard/interception/internal/IElementController", "annotations", "()[Ljava/lang/Class;", true);
            Label l5 = new Label();
            mv.visitJumpInsn(IFNULL, l5);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitMethodInsn(INVOKEINTERFACE, "com/richard/interception/internal/IElementController", "annotations", "()[Ljava/lang/Class;", true);
            mv.visitInsn(ARRAYLENGTH);
            Label l6 = new Label();
            mv.visitJumpInsn(IFNE, l6);
            mv.visitLabel(l5);
            mv.visitFrame(Opcodes.F_APPEND, 1, new Object[]{"com/richard/interception/internal/IElementController"}, 0, null);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitMethodInsn(INVOKEINTERFACE, "com/richard/interception/internal/IElementController", "processed", "()Ljava/lang/Object;", true);
            mv.visitVarInsn(ASTORE, 2);
            Label l7 = new Label();
            mv.visitJumpInsn(GOTO, l7);
            mv.visitLabel(l6);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitInsn(ICONST_0);
            mv.visitVarInsn(ISTORE, 4);
            Label l8 = new Label();
            mv.visitLabel(l8);
            mv.visitFrame(Opcodes.F_APPEND, 1, new Object[]{Opcodes.INTEGER}, 0, null);
            mv.visitVarInsn(ILOAD, 4);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitMethodInsn(INVOKEINTERFACE, "com/richard/interception/internal/IElementController", "annotations", "()[Ljava/lang/Class;", true);
            mv.visitInsn(ARRAYLENGTH);
            mv.visitJumpInsn(IF_ICMPGE, l7);
            Label l9 = new Label();
            mv.visitLabel(l9);
            mv.visitFieldInsn(GETSTATIC, owner, "FACTORY", "Lcom/richard/interception/internal/IElementInstanceLoader;");
            mv.visitVarInsn(ALOAD, 3);
            Label l10 = new Label();
            mv.visitLabel(l10);
            mv.visitMethodInsn(INVOKEINTERFACE, "com/richard/interception/internal/IElementController", "annotations", "()[Ljava/lang/Class;", true);
            mv.visitVarInsn(ILOAD, 4);
            mv.visitInsn(AALOAD);
            Label l11 = new Label();
            mv.visitLabel(l11);
            mv.visitMethodInsn(INVOKEINTERFACE, "com/richard/interception/internal/IElementInstanceLoader", "getInterceptorInstance", "(Ljava/lang/Class;)Lcom/richard/interception/AnnotationInterceptor;", true);
            mv.visitVarInsn(ASTORE, 5);
            Label l12 = new Label();
            mv.visitLabel(l12);
            mv.visitVarInsn(ALOAD, 5);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitMethodInsn(INVOKEINTERFACE, "com/richard/interception/internal/IElementController", "getElement", "()Lcom/richard/interception/Element;", true);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitVarInsn(ALOAD, 3);
            Label l13 = new Label();
            mv.visitLabel(l13);
            mv.visitMethodInsn(INVOKEINTERFACE, "com/richard/interception/internal/IElementController", "annotations", "()[Ljava/lang/Class;", true);
            mv.visitVarInsn(ILOAD, 4);
            mv.visitInsn(AALOAD);
            mv.visitMethodInsn(INVOKEINTERFACE, "com/richard/interception/internal/IElementController", "getAnnotationValue", "(Ljava/lang/Class;)Ljava/util/Map;", true);
            Label l14 = new Label();
            mv.visitLabel(l14);
            mv.visitMethodInsn(INVOKEINTERFACE, "com/richard/interception/AnnotationInterceptor", "intercept", "(Lcom/richard/interception/Element;Ljava/util/Map;)Ljava/lang/Object;", true);
            mv.visitVarInsn(ASTORE, 2);
            Label l15 = new Label();
            mv.visitLabel(l15);
            mv.visitIincInsn(4, 1);
            mv.visitJumpInsn(GOTO, l8);
            mv.visitLabel(l7);
            mv.visitFrame(Opcodes.F_CHOP, 1, null, 0, null);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitInsn(ARETURN);
            Label l16 = new Label();
            mv.visitLabel(l16);
            mv.visitMaxs(5, 6);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, "_async", "(Lcom/richard/interception/internal/IElementBuilder;Lcom/richard/interception/internal/IElementExecutionLoader;)V", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitTypeInsn(NEW, asyncOwner);
            mv.visitInsn(DUP);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKESPECIAL, asyncOwner, "<init>", "(Lcom/richard/interception/internal/IElementBuilder;Lcom/richard/interception/internal/IElementExecutionLoader;)V", false);
            mv.visitInsn(ICONST_0);
            mv.visitTypeInsn(ANEWARRAY, "java/lang/Void");
            mv.visitMethodInsn(INVOKEVIRTUAL, asyncOwner, "execute", "([Ljava/lang/Object;)Landroid/os/AsyncTask;", false);
            Label l1 = new Label();
            mv.visitLabel(l1);
            mv.visitInsn(RETURN);
            Label l2 = new Label();
            mv.visitLabel(l2);
            mv.visitMaxs(4, 2);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, "_ui", "(Lcom/richard/interception/internal/IElementBuilder;Lcom/richard/interception/internal/IElementExecutionLoader;)V", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitFieldInsn(GETSTATIC, owner, "HANDLER", "Landroid/os/Handler;");
            mv.visitTypeInsn(NEW, uiOwner);
            mv.visitInsn(DUP);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKESPECIAL, uiOwner, "<init>", "(Lcom/richard/interception/internal/IElementBuilder;Lcom/richard/interception/internal/IElementExecutionLoader;)V", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "android/os/Handler", "post", "(Ljava/lang/Runnable;)V", false);
            Label l1 = new Label();
            mv.visitLabel(l1);
            mv.visitInsn(RETURN);
            Label l2 = new Label();
            mv.visitLabel(l2);
            mv.visitMaxs(5, 2);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_STATIC, "<clinit>", "()V", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitTypeInsn(NEW, "android/os/Handler");
            mv.visitInsn(DUP);
            mv.visitMethodInsn(INVOKESTATIC, "android/os/Looper", "getMainLooper", "()Landroid/os/Looper;", false);
            mv.visitMethodInsn(INVOKESPECIAL, "android/os/Handler", "<init>", "(Landroid/os/Looper;)V", false);
            mv.visitFieldInsn(PUTSTATIC, owner, "HANDLER", "Landroid/os/Handler;");
            Label l1 = new Label();
            mv.visitLabel(l1);
            mv.visitTypeInsn(NEW, "java/util/concurrent/ConcurrentHashMap");
            mv.visitInsn(DUP);
            mv.visitMethodInsn(INVOKESPECIAL, "java/util/concurrent/ConcurrentHashMap", "<init>", "()V", false);
            mv.visitFieldInsn(PUTSTATIC, owner, "BUILD_MAP", "Ljava/util/Map;");
            Label l2 = new Label();
            mv.visitLabel(l2);
            mv.visitTypeInsn(NEW, instance);
            mv.visitInsn(DUP);
            mv.visitMethodInsn(INVOKESPECIAL, instance, "<init>", "()V", false);
            mv.visitFieldInsn(PUTSTATIC, owner, "FACTORY", "Lcom/richard/interception/internal/IElementInstanceLoader;");
            mv.visitInsn(RETURN);
            mv.visitMaxs(0, 0);
            mv.visitEnd();
        }
        cw.visitEnd();

        return cw.toByteArray();
    }

}
